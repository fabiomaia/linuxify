#!/bin/bash
set -euo pipefail

if ! [[ "$OSTYPE" =~ darwin* ]]; then
	echo "This is meant to be run on macOS only"
	exit 1
fi

if ! command -v brew >/dev/null; then
	echo "In order to use this script please install Homebrew from https://brew.sh"
	exit 1
fi

for dir in /usr/local/bin /usr/local/sbin; do
	if [[ ! -d $dir || ! -w $dir ]]; then
		echo "$dir must exist and be writeable"
		exit 1
	fi
done

_linuxify_formulas=(
	# GNU programs non-existing in macOS
	"watch" "wget" "wdiff" "gdb" "autoconf"
	# GNU programs whose BSD counterpart is installed in macOS
	"coreutils" "binutils" "diffutils" "ed" "findutils" "gawk" "gnu-indent" "gnu-sed" "gnu-tar" "gnu-which" "grep" "gzip" "screen"

	# GNU programs existing in macOS which are outdated
	"bash" "emacs" "gpatch" "less" "m4" "make" "nano" "bison"
	# BSD programs existing in macOS which are outdated
	"flex"

	# Other common/preferred programs in GNU/Linux distributions
	"libressl" "file-formula" "git" "openssh" "perl" "python" "rsync" "unzip" "vim"
)

linuxify() {
	# Install all formulas
	for (( i=0; i<${#linuxify_formulas[@]}; i++ )); do
		if ! brew ls --versions ${linuxify_formulas[i]} >/dev/null; then
			brew install ${linuxify_formulas[i]}
		fi
	done

	# Offer to change shell to newly installed bash read -p "Do you want to change your shell to the latest bash (Y/N)? " -n 1 -r
	if [[ $REPLY =~ [Yy]$ ]]; then
		grep -qF '/usr/local/bin/bash' /etc/shells || echo '/usr/local/bin/bash' | sudo tee -a /etc/shells >/dev/null
		echo # Blank line so the password entry isn't bunched-up
		chsh -s /usr/local/bin/bash
	else
		echo "OK, leaving your shell as $SHELL"
	fi

	# gdb requires special privileges to access Mach ports.
	# One can either codesign the binary as per https://sourceware.org/gdb/wiki/BuildingOnDarwin
	# Or, on 10.12 Sierra or later with SIP, declare `set startup-with-shell off` in `~/.gdbinit`:
	grep -qF 'set startup-with-shell off' ~/.gdbinit || echo 'set startup-with-shell off' | tee -a ~/.gdbinit >/dev/null

	# Persist linuxify in bash profile
	echo '. ~/linuxify' >> ~/.bashrc
	exec bash
}

unlinuxify() {
	# Remove gdb fix
	[ -f ~/.gdbinit ] && sed -i.bak '/set startup-with-shell off/d' ~/.gdbinit && rm ~/.gdbinit.bak

	# Offer to change default shell back to macOS default
	bash_is_local=false
	if [[ $SHELL =~ local ]]; then
		read -p "Do you want to change your shell back to macOS default (macOSVersion >= 10.15.x ? zsh : bash) ? " -n 1 -r
		if [[ $REPLY =~ [Yy]$ ]]; then
			sudo sed -i.bak '/\/usr\/local\/bin\/bash/d' /etc/shells && sudo rm /etc/shells.bak
			echo
			if [[ $(sw_vers -productVersion | awk -F. '{print $2}') -gt 14 ]]; then
				chsh -s /bin/zsh
			else
				chsh -s /bin/bash
			fi
		else
			echo "OK, leaving your shell as $SHELL"
			if [[ $SHELL == /usr/bin/local/bash ]]; then
				bash_is_local=true
			fi
		fi
	fi

	# Uninstall all formulas in reverse order
	for (( i=${#linuxify_formulas[@]}-1; i>=0; i-- )); do
		if [[ ${linuxify_formulas[i]} != bash ]]; then
			brew uninstall -f $(echo "${linuxify_formulas[i]}" | cut -d ' ' -f1)
		fi
	done

	# Only remove bash if the user didn't elect to keep it as their shell
	if [[ "$bash_is_local" != true ]]; then
		brew uninstall bash
	fi

	# Remove changes to PATH/MANPATH/INFOPATH/LDFLAGS/CPPFLAGS
	sed -i '/. ~\/linuxify$/d' ~/.bashrc
	rm -f ~/linuxify
	exec bash
}

# Exports

# most programs
export PATH="/usr/local/bin:$PATH"
export MANPATH="/usr/local/share/man:$MANPATH"
export INFOPATH="/usr/local/share/info:$INFOPATH"

# coreutils
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

# make
export PATH="/usr/local/opt/make/libexec/gnubin:$PATH"
export MANPATH="/usr/local/opt/make/libexec/gnuman:$MANPATH"

# m4
export PATH="/usr/local/opt/m4/bin:$PATH"

# file-formula
export PATH="/usr/local/opt/file-formula/bin:$PATH"

# unzip
export PATH="/usr/local/opt/unzip/bin:$PATH"

# python
export PATH="/usr/local/opt/python/libexec/bin:$PATH"

# flex
export PATH="/usr/local/opt/flex/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/flex/lib"
export CPPFLAGS="-I/usr/local/opt/flex/include"

# bison
export PATH="/usr/local/opt/bison/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/bison/lib"

# libressl
export PATH="/usr/local/opt/libressl/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/libressl/lib"
export CPPFLAGS="-I/usr/local/opt/libressl/include"
export PKG_CONFIG_PATH="/usr/local/opt/libressl/lib/pkgconfig"

# ed
export PATH="/usr/local/opt/ed/libexec/gnubin:$PATH"

# findutils
export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"

# gnu-indent
export PATH="/usr/local/opt/gnu-indent/libexec/gnubin:$PATH"

# gnu-sed
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

# gnu-tar
export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"

# gnu-which
export PATH="/usr/local/opt/gnu-which/libexec/gnubin:$PATH"

# grep
export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
